package org.festilog.springtransaction.order;

/**
 * 스프링이 체크 예외는 커밋하고, 언체크 예외(RuntimeException)은 롤백하는 이유
 * 체크 예외는 비즈니스 예외이므로 커밋.
 * 언체크 예외는 복구 불가능한 예외이므로 롤백
 */

/**
 * 비즈니스 예외의 경우 롤백하면 안 된다!!
 * 비즈니스 예외의 예시를 들어보자.
 *
 * 예외 케이스 👉 주문시 결제 잔고가 부족하면 주문 데이터를 저장하고, 결제 상태를 '대기'로 처리한다. 👈
 *              그리고 이 경우, 고객에게 잔고 부족을 알리고 별도의 계좌로 입금하도록 안내한다.
 *
 * 이 경우에는 롤백하면 안 된다!! 왜? 주문 데이터가 사라지니까!!!
 */

/**
 * 비즈니스 상황에서 체크 예외의 경우에도 트랜잭션을 커밋하지 않고, 롤백하고 싶을 수 있다.
 * 이때는 rollbackFor 옵션을 사용하면 된다.
 */

/**
 * 런타임 예외는 항상 롤백된다. 체크 예외인 경우 rollbackFor 옵션을 사용해서 비즈니스 상황에 따라서 커밋과 롤백을 선택하면 된다.
 * 체크 예외를 발생 시켰을 때 커밋할지 말지를 판단한다.
 */

/**
 * 👨🏻‍🏫 영한쌤의 추천!
 * 👉 rollbackFor 같은 옵션 이전에, 우리가 일단 스프링의 기본 컨셉을 이용해보면 어떨까?
 * 스프링의 기본 컨셉은 런타임 예외는 진짜 '시스템에 문제가 생긴 상황'이고, 롤백을 해야된다라는 컨셉.
 * 체크 예외는 비즈니스 예외, 의미있는 예외일 수 있으니까 커밋해줄게~ 가 되는 거다.
 */
public class NotEnoughMoneyException extends Exception {

    public NotEnoughMoneyException(final String message) {
        super(message);
    }
}
