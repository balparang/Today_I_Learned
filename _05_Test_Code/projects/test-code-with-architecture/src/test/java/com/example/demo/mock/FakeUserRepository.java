package com.example.demo.mock;

import com.example.demo.common.domain.exception.ResourceNotFoundException;
import com.example.demo.user.domain.User;
import com.example.demo.user.domain.UserStatus;
import com.example.demo.user.service.port.UserRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class FakeUserRepository implements UserRepository {

    // 사실 소형 테스트는 단일 스레드에서 돌아가기 때문에 동기화를 걱정할 필요가 없다.
//    private final AtomicLong autoGeneratedId = new AtomicLong(0);
//    private final List<User> data = Collections.synchronizedList(new ArrayList<>());

    private Long autoGeneratedId = 0L;
    private final List<User> data = new ArrayList<>();

    @Override
    public User getById(long id) {
        return findById(id).orElseThrow(() -> new ResourceNotFoundException("Users", id));
    }

    @Override
    public Optional<User> findByEmailAndStatus(String email, UserStatus userStatus) {
        return data.stream()
                .filter(item -> item.getEmail().equals(email) && item.getStatus() == userStatus)
                .findAny();
    }

    @Override
    public Optional<User> findByIdAndStatus(long id, UserStatus userStatus) {
        return data.stream()
                .filter(item -> item.getId().equals(id) && item.getStatus() == userStatus)
                .findAny();
    }

    @Override
    public User save(User user) {
        /**
         *  JPA 는 id 가 0이거나 null 이면 insert 를 한다.(동작원리)
         *  이렇게 구현하는 것 자체가 JPA에 의존적이기 때문에 create 나 update 를 분리하는 것이 좋다.
         */
        if (user.getId() == null || user.getId() == 0) {
            User newUser = User.builder()
                    .id(autoGeneratedId++)
                    .email(user.getEmail())
                    .nickname(user.getNickname())
                    .address(user.getAddress())
                    .certificationCode(user.getCertificationCode())
                    .status(user.getStatus())
                    .lastLoginAt(user.getLastLoginAt())
                    .build();

            data.add(newUser);
            return newUser;
        } else {
            // id 가 있으면 기존 데이터를 지우고 지금 들어온 데이터를 저장한다.
            data.removeIf(item -> Objects.equals(item.getId(), user.getId()));
            data.add(user);
            return user;
        }
    }

    @Override
    public Optional<User> findById(long id) {
        return data.stream()
                .filter(item -> item.getId().equals(id))
                .findAny();
    }

}
